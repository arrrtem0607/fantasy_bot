import operator
import logging

from aiogram.types import CallbackQuery
from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Button, Column, Multiselect, Select, Row, Group
from aiogram_dialog.widgets.text import Const, Format

from bot.utils.statesform import TeamSelectionSG, MainMenuSG
from bot.lexicon.lexicon import LEXICON_RU
from db.controller.ORM import ORMController
from bot.utils.validators import validate_team

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# ORMController –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
orm_controller = ORMController()

# –ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π
async def get_goalkeepers(
        dialog_manager: DialogManager,
        **kwargs):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞—Ç–∞—Ä—è—Ö")
    async with dialog_manager.middleware_data['session'] as session:
        goalkeepers = await orm_controller.get_goalkeepers(session)
        if not goalkeepers:
            logger.warning("–°–ø–∏—Å–æ–∫ –≤—Ä–∞—Ç–∞—Ä–µ–π –ø—É—Å—Ç!")
            return {"goalkeepers": []}

    selected_goalkeeper = dialog_manager.dialog_data.get("goalkeeper")
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—Ç–∞—Ä–µ–π: {len(goalkeepers)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å–∏–º–≤–æ–ª–æ–º –º—è—á–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—Ç–∞—Ä—è
    goalkeepers_list = [
        (f"‚öΩÔ∏è {g.name} ({g.team}) ({g.price} –±–∞–ª–ª–æ–≤)" if str(g.id) == selected_goalkeeper
         else f"{g.name} ({g.team}) ({g.price} –±–∞–ª–ª–æ–≤)", str(g.id))
        for g in goalkeepers
    ]

    logger.info(f"–°–ø–∏—Å–æ–∫ –≤—Ä–∞—Ç–∞—Ä–µ–π –¥–ª—è Select: {goalkeepers_list}")
    return {"goalkeepers": goalkeepers_list}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—Ç–∞—Ä—è
async def on_goalkeeper_selected(
        callback: CallbackQuery,
        button: Select,
        dialog_manager: DialogManager,
        item_id: str):
    dialog_manager.dialog_data["goalkeeper"] = item_id
    logger.info(f"–í—ã–±—Ä–∞–Ω –≤—Ä–∞—Ç–∞—Ä—å —Å ID: {item_id}")

    await callback.answer(LEXICON_RU['goalkeeper_selected'])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
async def on_players_state_changed(
        event: CallbackQuery,
        widget: Multiselect,
        dialog_manager: DialogManager,
        item_id: str):
    selected_players = dialog_manager.dialog_data.get('selected_players', [])

    if item_id in selected_players:
        selected_players.remove(item_id)
    else:
        selected_players.append(item_id)

    dialog_manager.dialog_data['selected_players'] = selected_players
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {selected_players}")

    await event.answer()  # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# –ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
async def get_players_by_team(
        dialog_manager: DialogManager,
        **kwargs):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞—Ö –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    current_team_idx = dialog_manager.dialog_data.get('current_team_idx', 0)
    teams = dialog_manager.dialog_data.get('teams', [])

    if not teams:
        async with dialog_manager.middleware_data['session'] as session:
            teams = await orm_controller.get_all_teams(session)
            teams.sort()
            dialog_manager.dialog_data['teams'] = teams

    current_team = teams[current_team_idx] if teams else None
    if not current_team:
        return {"players": [], "current_team_idx": current_team_idx, "teams": teams}

    async with dialog_manager.middleware_data['session'] as session:
        players = await orm_controller.get_field_players_by_team(session, current_team)
        if not players:
            logger.warning("–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç!")
            return {"players": [], "current_team_idx": current_team_idx, "teams": teams}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    players_data = [(f"{player.name} ({player.team}) ({player.price} –±–∞–ª–ª–æ–≤)", str(player.id), player.price) for player
                    in players]

    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    selected_player_ids = dialog_manager.dialog_data.get('selected_players', [])

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∏–≥—Ä–æ–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö –æ–±—ä–µ–∫—Ç—ã –ø–æ ID
    selected_players = []
    if selected_player_ids:
        selected_players = await orm_controller.get_players_by_ids(session, selected_player_ids)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    selected_players_price = sum(player.price for player in selected_players)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–±—Ä–∞–Ω –≤—Ä–∞—Ç–∞—Ä—å
    selected_goalkeeper_id = dialog_manager.dialog_data.get("goalkeeper")
    goalkeeper_price = 0
    if selected_goalkeeper_id:
        goalkeeper = await orm_controller.get_players_by_ids(session, [selected_goalkeeper_id])
        goalkeeper_price = goalkeeper[0].price if goalkeeper else 0

    # –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 7 –∏–≥—Ä–æ–∫–æ–≤ (1 –≤—Ä–∞—Ç–∞—Ä—å –∏ 6 –ø–æ–ª–µ–≤—ã—Ö)
    total_players = 7
    remaining_players = total_players - (len(selected_players) + (1 if selected_goalkeeper_id else 0))

    # –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–∫–Ω–∞
    logger.info(
        f"–°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ö–æ–º–∞–Ω–¥–∞: {current_team}), –≤—ã–±—Ä–∞–Ω–æ –∏–≥—Ä–æ–∫–æ–≤: {len(selected_players)}, –æ—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–ª–æ–≤: {46 - (selected_players_price + goalkeeper_price)}, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å: {remaining_players}")

    return {
        "players": players_data,
        "current_team_idx": current_team_idx,
        "teams": teams,
        "current_team": current_team,
        "remaining_points": 46 - (selected_players_price + goalkeeper_price),
        "remaining_players": remaining_players
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
async def set_next_team(
        dialog_manager: DialogManager):
    current_team_idx = dialog_manager.dialog_data.get('current_team_idx', 0)
    teams = dialog_manager.dialog_data.get('teams', [])
    if current_team_idx < len(teams) - 1:
        dialog_manager.dialog_data['current_team_idx'] = current_team_idx + 1
    await dialog_manager.switch_to(TeamSelectionSG.FIELD_PLAYERS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–∞–Ω–¥—É
async def set_prev_team(
        dialog_manager: DialogManager):
    current_team_idx = dialog_manager.dialog_data.get('current_team_idx', 0)
    if current_team_idx > 0:
        dialog_manager.dialog_data['current_team_idx'] = current_team_idx - 1
    await dialog_manager.switch_to(TeamSelectionSG.FIELD_PLAYERS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
async def process_confirm_team(
        callback: CallbackQuery,
        button: Button,
        dialog_manager: DialogManager):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_players = dialog_manager.current_context().dialog_data.get('selected_players', [])
    selected_players = [int(x) for x in selected_players]

    # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ–ª–∫–∏–ø–µ—Ä–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤
    selected_goalkeeper_id = dialog_manager.dialog_data.get('goalkeeper')
    if selected_goalkeeper_id:
        selected_players.append(int(selected_goalkeeper_id))  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–∫–∏–ø–µ—Ä–∞

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    async with dialog_manager.middleware_data['session'] as session:
        players = await orm_controller.get_players_by_ids(session, selected_players)

    # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–ø–∏—Ç–∞–Ω–∞
    captain_id = dialog_manager.dialog_data.get('captain')

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    is_valid, error_message = await validate_team(players)

    if not is_valid:
        await callback.answer(error_message, show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
    user_id = callback.from_user.id
    for player in players:
        is_captain = (player.id == captain_id)
        await orm_controller.add_fantasy_team(session, user_id, player.id, is_captain)

    await dialog_manager.switch_to(TeamSelectionSG.CONFIRMATION)

# –ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
async def get_captains(
        dialog_manager: DialogManager,
        **kwargs):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞")
    selected_players = dialog_manager.dialog_data.get('selected_players', [])
    selected_goalkeeper_id = dialog_manager.dialog_data.get("goalkeeper")

    if not selected_players and not selected_goalkeeper_id:
        logger.warning("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞")
        return {"players": []}

    async with dialog_manager.middleware_data['session'] as session:
        all_selected_players = await orm_controller.get_players_by_ids(
            session, selected_players + [selected_goalkeeper_id]
        )

    selected_captain = dialog_manager.dialog_data.get("captain")

    players_list = [
        (f"üÉè {player.name} ({player.team})" if str(player.id) == selected_captain
         else f"{player.name} ({player.team})", str(player.id))
        for player in all_selected_players
    ]

    logger.info(f"–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞: {players_list}")
    return {"players": players_list}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
async def on_captain_selected(
        callback: CallbackQuery,
        button: Select,
        dialog_manager: DialogManager,
        item_id: str):
    dialog_manager.dialog_data["captain"] = item_id
    logger.info(f"–í—ã–±—Ä–∞–Ω –∫–∞–ø–∏—Ç–∞–Ω —Å ID: {item_id}")

    await callback.answer(LEXICON_RU['captain_selected'])

async def get_team_info(
        dialog_manager: DialogManager,
        **kwargs):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞
    team_info = dialog_manager.dialog_data.get('team_info', [])
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ: {team_info}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ ID –∏–≥—Ä–æ–∫–æ–≤

    # –ï—Å–ª–∏ team_info –ø—É—Å—Ç–æ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not team_info:
        user_id = dialog_manager.event.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
        session = dialog_manager.middleware_data['session']
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        team_info_db = await orm_controller.get_team_by_user_id(session, user_id)

        if not team_info_db or not team_info_db.fantasy_teams:
            logger.warning("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç–æ–π!")
            return {"team_info": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞."}  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ dialog_data –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        dialog_manager.dialog_data['team_info'] = [player.player_id for player in team_info_db.fantasy_teams]
        team_info = dialog_manager.dialog_data['team_info']

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∏—Ö ID
    session = dialog_manager.middleware_data['session']
    players_data = await orm_controller.get_players_by_ids(session, team_info)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∏–≥—Ä–æ–∫–∞—Ö: {players_data}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã Player

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    players_list = "\n".join([f"{player.name} ({player.team})" for player in players_data])

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω–µ
    return {"team_info": players_list}

# –í–∏–¥–∂–µ—Ç Select –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–∞—Ç–∞—Ä–µ–π
goalkeepers_select = Select(
    Format("{item[0]}"),
    id="goalkeepers_select",
    item_id_getter=operator.itemgetter(1),
    items="goalkeepers",
    on_click=on_goalkeeper_selected
)

# –í–∏–¥–∂–µ—Ç Select –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
captain_select = Select(
    Format("{item[0]}"),
    id="captain_select",
    item_id_getter=operator.itemgetter(1),
    items="players",
    on_click=on_captain_selected
)

# –û–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
captain_selection_window = Window(
    Const(LEXICON_RU['select_captain']),
    Column(
        captain_select,
        Button(Const(LEXICON_RU['confirm_captain']),
               id="confirm_captain",
               on_click=process_confirm_team),
        Button(Const(LEXICON_RU['return_to_field_players']),
               id="return_to_field_players",
               on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.FIELD_PLAYERS))  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    ),
    state=TeamSelectionSG.CAPTAIN_SELECTION,
    getter=get_captains
)

# –í–∏–¥–∂–µ—Ç Multiselect –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –±–∞–ª–ª–æ–≤
players_multiselect = Multiselect(
    checked_text=Format('‚öΩÔ∏è {item[0]}'),
    unchecked_text=Format('{item[0]}'),
    id="players_multiselect",
    item_id_getter=operator.itemgetter(1),
    items="players",
    min_selected=0,
    max_selected=6,
    on_state_changed=on_players_state_changed
)

# –û–∫–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
team_selection_dialog = Dialog(
    Window(
        Const(LEXICON_RU['rules']),
        Button(Const(LEXICON_RU['come']),
               id='switch_to_goalkeeper',
               on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.GOALKEEPER)),
        Button(Const(LEXICON_RU['return_main_menu']),
               id="to_main_menu",
               on_click=lambda c, b, d: d.start(MainMenuSG.MAIN_PANEL)),
        state=TeamSelectionSG.INSTRUCTION
    ),
    Window(
        Const(LEXICON_RU['select_goalkeeper']),
        Column(
            goalkeepers_select,
            Button(Const(LEXICON_RU['confirm_goalkeeper']),
                   id="confirm_goalkeeper",
                   on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.FIELD_PLAYERS)),
            Button(Const(LEXICON_RU['return_to_instructions']),
                   id="return_to_instructions",
                   on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.INSTRUCTION))  # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–∞–≤–∏–ª–∞–º
        ),
        state=TeamSelectionSG.GOALKEEPER,
        getter=get_goalkeepers
    ),
    Window(
        Format(LEXICON_RU['select_field_players']),
        Group(
            Column(players_multiselect),
            Row(
                Button(Const(LEXICON_RU['prev_team']),
                       id="prev_team",
                       on_click=lambda c, b, d: set_prev_team(d)),
                Button(Const(LEXICON_RU['next_team']),
                       id="next_team",
                       on_click=lambda c, b, d: set_next_team(d)),
            ),
            Button(Const(LEXICON_RU['confirm_team']),
                   id="confirm_team",
                   on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.CAPTAIN_SELECTION)),
            Button(Const(LEXICON_RU['return_to_goalkeeper']),
                   id="return_to_goalkeeper",
                   on_click=lambda c, b, d: d.switch_to(TeamSelectionSG.GOALKEEPER))  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤—Ä–∞—Ç–∞—Ä—è
        ),
        state=TeamSelectionSG.FIELD_PLAYERS,
        getter=get_players_by_team
    ),
    captain_selection_window,
    Window(
        Format(LEXICON_RU['team_saved']),
        Button(Const(LEXICON_RU['return_main_menu']),
               id="to_main_menu",
               on_click=lambda c, b, d: d.start(MainMenuSG.MAIN_PANEL)),
        state=TeamSelectionSG.CONFIRMATION,
        getter=get_team_info
    )
)
